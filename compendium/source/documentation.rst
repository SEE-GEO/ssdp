Documenting your package
========================

This document describes how to use `Sphinx <https://www.sphinx-doc.org/en/master/>`_ to generate
documentation for your Python packages.

Sphinx
------

Sphinx is a software tool that can be used to generate complex documentation in various output
formats (HTML, PDF) from input files written using reStructuredText as markup language. It has
been developed for the `Python documentation <https://docs.python.org>`_ and is probably the most popular
tool to document Python packages.

To install Sphinx using :code:`pip` run:

.. code:: bash

   $ pip install sphinx

Folder structure
----------------

It is common practice to store the package documentation in a separate folder named :code:`docs`
inside your project folder. For the :code:`weather_app` example package the folder structure looks
as follows.

::

     weather_app/
     ├── test/
     │   ├── test_api.py
     │   └── test_weather_app.py
     ├── weather_app/
     │    ├── __init__.py
     │    └── api.py
     └── docs/

Setting up the Sphinx documentation
-----------------------------------

Sphinx provides the :code:`sphinx-quickstart` command to setup the initial document structure
for your documentation. Change to the `docs` directory and issue

.. code :: bash

    $ sphinx-quickstart

You will be prompted to input basic information about your project. I recommend letting the
:code:`sphinx-quickstart` command separate :code:`source` and :code:`build` directory, since
it will make it easier to separate the input files from the output files generated by Sphinx.

After running `sphinx-quickstart` the :code:`docs` directory will contains a :code:`Makefile`
and two directories, :code:`build` and :code:`source`. As its name suggests, the :code:`source`
directory contains the input files, which Sphinx uses to generate the actual documentation.

::

    docs/
    ├── Makefile
    ├── build
    ├── make.bat
    └── source/
        ├── _static
        ├── _templates
        ├── conf.py
        └── index.rst

More specifically, the :code:`source` directory contains the :code:`conf.py` file and
a file called :code:`index.rst`. The :code:`conf.py` file is a Python source file that
contains relevant meta data about your project and is used to configure the Sphinx
documentation. The :code:`index.rst` file is the root of the tree of :code:`*.rst` that
Sphinx will build your documentation from.

Building the documentation
--------------------------

To build the HTML documentation navigate into the :code:`docs` folder and run

.. code :: bash

    $ make html

This will generate the HTML documentation of your documentation. You can look
at it by opening the :code:`index.html` in your browser.

Sphinx's :code:`.rst` format
----------------------------

The :code:`*.rst` files that Sphinx uses to build documentation are written
using the ReStructuredText markup language (see `here
<https://en.wikipedia.org/wiki/ReStructuredText>`_ for an overview an `here
<https://www.sphinx-doc.org/en/master/usage/restructuredtext/index.html>`_ for
the full Sphinx reference.

Sphinx extends basic ReStructuredText markup with functionality to establish
links between :code:`*.rst` files and thus build complex document structures.
Sphinx does this by introducing special *directives*.

A directive is followed starts with two dots :code:`..` followed by the
directive name and two colons. An example of a directive is the :code:`toctree`
command given below:

.. code-block:: rst

    .. toctree::
      :maxdepth: 1

      getting_started
      documentation

A directive can have *arguments*, *options* and *content*. Arguments are given
immediately after the two colons following the directive name. Options are given
in the form :code:`:option_name: value` on the lines *directly following* the
directive name. Finally, content of the directive must be provided after a blank
line that separates directive name and options from the content.

.. note::

 The content of the directive must be indented to the same level as the options.
 Even if no options are provided, the content must be indented at least by one
 space.


Directives
----------

In order to start writing documentation there is a small number of directives
that you should now. A complete overview over available directives can be found
`here
<https://www.sphinx-doc.org/en/master/usage/restructuredtext/directives.html>`_.

toctree
```````
The :code:`toctree` directive is arguable the most important directive since
it is used to combine multiple :code:`*.rst` files into a single document. What
the directive does exactly depends on the output format, but for HTML it generates
a table of content from the contents found in the filenames given as the directive's
content.

The example directive from above will generate links to the documents `getting_started`
and `documentation`. The files must exist as ReStructuredText files with the corresponding
names, i.e. :code:`getting_started.rst` and :code:`documentation.rst`, in the same directory
as the file containing the directive. The :code:`maxdepth` option defines the depth upto
which to include headers found in the respective files.

.. code-block:: rst

    .. toctree::
      :maxdepth: 1

      getting_started
      documentation

Files that are located in subdirectories can be included by providing the
relative path to the file but excluding the :code:`*.rst` file ending. If an
absolute path, i.e. one starting with :code:`/` the file the path is interpreted
relative to the :code:`source` directory of the documentation tree.

code-block
``````````

The :code:`code-block` directive can be used to typeset source code. It takes as
single argument the language which should be typeset.

As an example, the following code directive,

.. code-block:: rst

  .. code-block:: python

      def say_hi():
          print("hi")

yields the following output:

.. code-block:: python

  def say_hi():
      print("hi")

note
````

The :code:`note` directive can be used to highlight certain messages. An example
of a very simple note is given below.

.. code-block:: rst

  .. note::

    This is a note



Adding documentation
--------------------

With this basic understanding of Sphinx directives, you can begin writing
software. The :code:`index.rst` file represents represents the root of your
documentation. For HTML output it is the welcome page for your docs. For LaTeX
output, the :code:`index.rst` gets rendered to the beginning of your document.

The initial :code:`index.rst` generated by :code:`sphinx-quickstart` looks as follows:

.. code-block:: rst

  .. weather_app documentation master file, created by
    sphinx-quickstart on Sat Sep 19 08:20:42 2020.
    You can adapt this file completely to your liking, but it should at least
    contain the root `toctree` directive.

  Welcome to weather_app's documentation!
  =======================================

  .. toctree::
    :maxdepth: 2
    :caption: Contents:



  Indices and tables
  ==================

  * :ref:`genindex`
  * :ref:`modindex`
  * :ref:`search`


All it contains are two headers, a :code:`toctree` directive and a list with links to
the keyword index, module index and search pages, which are generated automatically by Sphinx.

To add a new section to your documentation, you need to create a new :code:`.rst` file
and add it to the :code:`toctree` directive. For example to add a section with usage
instructions create a file :code:`usage.rst` and include it in the :code:`toctree` directive
as follows:

.. code-block:: rst

  .. toctree::
    :maxdepth: 2
    :caption: Contents:

    usage

Adding source code documentation
--------------------------------

An important feature of Sphinx is that it can automatically read in Python
docstrings from your code and include it in your documentation. This is
implemented by a Sphinx extension called :code:`autodoc`, which needs to be
enabled by adding its name to the :code:`extensions` in the :code:`conf.py`
file.

.. code-block:: Python

      ...
      # Add any Sphinx extension module names here, as strings. They can be
      # extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
      # ones.
      extensions = [ 'sphinx.ext.autodoc', 'sphinx.ext.napoleon' ] ...
      ...

The above snippet also enables another extension called :code:`napoleon`.
Napoleon is required to convert docstrings written in `Google
<https://github.com/google/styleguide/blob/gh-pages/pyguide.md#38-comments-and-docstrings>`_
or `numpy <https://numpydoc.readthedocs.io/en/latest/format.html format>`_ to
ReStructuredText. It is quite commonly used because both the Google and numpy
formats are easier to write and read than plain ReStructuredText markup.

Using :code:`autodoc`, the source-code documentation on module level can then be
included in :code:`.rst` files. For example, to include all docstring
documentation for a given module using the :code:`automodule` directive:

.. code-block:: rst

  .. automodule:: weather_app
    :members:

More fine-grained controlled over what parts of the source-code documentation
are included can be achieved using the :code:`autoclass, autofunction` and
:code:`automethod` directives.

Uploading your documentation to GitHub
--------------------------------------

GitHub has an integrated web-hosting service that can be used to display HTML documentation
generated with Sphinx. To use it all you need to do is to commit the content of the
:code:`/docs/build/html/ folder generated by running the :code:`make html` command to
a special branch called `gh-pages`. Since this branch is used only to store the documentation
files, we create it using the :code:`--orphan` option, which creates a new, completely
empty branch. The newly-created orphan branch will have all files that were previously part
of the repository staged, but they can removed using :code:`git rm -rf .`. Note that this
will only remove the files that were previously part of the git working tree and not any
other files from your repository.

Another detail worth mentioning is that for the HTML documentation to be rendered correctly
by GitHub you will need to add a :code:`.nojekyll` file to the repository.

Putting all of this together, you can publish your HTML documentation on GitHub
using the following steps. After using the GitHub web interface to activate the
GitHub pages services for your repository, the HTML documentation should be
available under the domain :code:`https://<username>.github.io/<repository>`.


.. code-block:: bash

   git checkout --orphan gh-pages
   git rm -rf . # Removes staged files contained in branch
   cp -r docs/build/html/* .
   touch .nojekyll
   git add *.html *.js *.inv _static _sources .nojekyll
   git push -u <remote-name>


