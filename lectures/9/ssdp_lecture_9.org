#+TITLE: Scientific Software Development with Python
#+SUBTITLE: Python standard library
#+AUTHOR: Simon Pfreundschuh
#+OPTIONS: H:2 toc:nil
#+LaTeX_HEADER: \institute{Department of Space, Earth and Environment}
#+LaTeX_HEADER: \setbeamerfont{title}{family=\sffamily, series=\bfseries, size=\LARGE}
#+LATEX_HEADER: \usepackage[style=authoryear]{biblatex}
#+LATEX_HEADER: \usepackage{siunitx}
#+LaTeX_HEADER: \usetheme{chalmers}
#+LATEX_HEADER: \usepackage{subcaption}
#+LATEX_HEADER: \usepackage{amssymb}
#+LATEX_HEADER: \usepackage{dirtree}
#+LATEX_HEADER: \usemintedstyle{monokai}
#+LATEX_HEADER: \usepackage{pifont}
#+LATEX_HEADER: \definecolor{light}{HTML}{CCCCCC}
#+LATEX_HEADER: \definecolor{dark}{HTML}{353535}
#+LATEX_HEADER: \definecolor{green}{HTML}{008800}
#+LATEX_HEADER: \definecolor{source_file}{rgb}{0.82, 0.1, 0.26}
#+LATEX_HEADER: \newcommand{\greencheck}{{\color{green}\ding{51}}}
#+LATEX_HEADER: \newcommand{\redcross}{{\color{red}\ding{55}}}
#+LATEX_HEADER: \newcommand{\question}{{\color{yellow}\textbf{???}}}
#+LATEX_HEADER: \addbibresource{literature.bib}
#+LATEX_HEADER: \newmintinline[pyil]{Python}{style=default, bgcolor=light}
#+BEAMER_HEADER: \AtBeginSection[]{\begin{frame}<beamer>\frametitle{Agenda}\tableofcontents[currentsection]\end{frame}}

* Overview
** Overview
  \centering
  \includegraphics[width=0.6\textwidth]{figures/dimensions_of_software_development_part_2}
   
* Data structures
** Classes or data structures? 
*** Classes in object oriented programming
    - Define data and associated behavior
*** What if there is no associated behavior?
    - Then defining a class is needlessly verbose.
    - Python provides specialized /data structures/ to store and
      retrieve data in different use cases.

** Tuples
*** Tuple
    - A tuple stores a sequence of values of arbitrary types:
    #+attr_latex: :options fontsize=\footnotesize, bgcolor=dark
    #+BEGIN_SRC Python
    record = (1, "name", [])
    #+END_SRC 
    - Tuples are /immutable/:
      - An existing =tuple= can't be changed.
      - But it can be used as key in a =dict=
    - =tuples= can be unpacked:
  #+attr_latex: :options fontsize=\footnotesize, bgcolor=dark
  #+BEGIN_SRC Python
  id, name, properties = record
  #+END_SRC 
      

** Named tuples
*** The problem with tuples
    - No inherent meaning of different tuple elements:
      - Hard to guess what different elements mean
      - Easy to make an error during unpacking
*** Solution
    - Named tuples:

    #+attr_latex: :options fontsize=\scriptsize, bgcolor=dark
    #+BEGIN_SRC Python
    from collections import namedtuple
    record_class = namedtuple("Record", ["id" ,"name", "properties"])
    record = record_class(1, "name", [])
    print(record) # Prints: Record(id=1, name='name', properties=[])
    #+END_SRC 

** Named tuples
    #+attr_latex: :options fontsize=\scriptsize, bgcolor=dark
    #+BEGIN_SRC Python
    from collections import namedtuple
    record_class = namedtuple("Record", ["id" ,"name", "properties"])
    print(record) # Prints: Record(id=1, name='name', properties=[])
    #+END_SRC 

*** What's going on here?
    - =namedtuple(typename, field_names, ...)= is a factory method that
      produces a new =class= with the name given by the =typename= argument[fn:1].
    - The constructor of the newly created =Record= class expects one value for each of the
      names in =fieldnames=.
    - The newly created class automatically has a useful implementation of the
      =__repr__= special method.

[fn:1] Yes, even classes are first-class objects in Python.

** Dataclasses
*** Another solution: Dataclasses
    #+attr_latex: :options fontsize=\footnotesize, bgcolor=dark
    #+BEGIN_SRC Python
    from dataclasses import dataclass
    @dataclass
    class Record:
        id: int
        name: str
        properties: list

    record = Record(1, "name", 2)
    print(record) # Prints: Record(id=1, name='name', properties=[])
    #+END_SRC 

** Dataclasses

    \centering
    \includegraphics[width=0.6\textwidth]{figures/long_neck}

** Dataclasses
    #+attr_latex: :options fontsize=\footnotesize, bgcolor=dark
    #+BEGIN_SRC Python
    from dataclasses import dataclass
    @dataclass
    class Record:
        id: int
        name: str
        properties: list
    #+END_SRC 
*** What's going on here?
    - Python 3.5 introduced type annotations[fn:3]:
      #+attr_latex: :options fontsize=\footnotesize, bgcolor=dark
      #+BEGIN_SRC Python
      a : int = 1 # This is valid >= Python 3.5 code
      #+END_SRC
    - The =dataclass= decorator parses the variable annotations and
      turns them into attributes of the class.


[fn:3] We'll see more of them next lecture.

** Dataclasses
*** Default values:

      #+attr_latex: :options fontsize=\footnotesize, bgcolor=dark
      #+BEGIN_SRC Python
      from dataclasses import dataclass, field
      @dataclass
      class Record:
          id: int = 1
          name: str = "name"
          properties: list = field(default_factory=list)
      record()
      print(record) # Prints: Record(id=1, name='name', properties=[])
      #+END_SRC 

** Exercise 1

   - Exercise 1 from exercise sheet
   - Time: 5 minutes

** Exercise 1

*** The problem with mutable default values

    - Default values are created once, when the function definition is parsed.
    - \textbf{The default values are shared between different invocations of a function}.
    - If a mutable default value is changed, these changes affect subsequent calls
      of the function.

** Namedtuples vs. Dataclasses 

*** Namedtuples
    - Immutable:
      - Can be used as key in dict.
    - Smaller memory footprint than dataclasses

*** Dataclasses
    - More intuitive syntax than named tuples.
    - Can add customized class methods and use inheritance

** Dataclass

*** Dataclass with customized behavior
      #+attr_latex: :options fontsize=\scriptsize, bgcolor=dark
      #+BEGIN_SRC Python
      from dataclasses import dataclass
      @dataclass
      class Record:
          id: int
          name: str
          properties: list = field(default_factory=list)

          def __add__(self, other):
              """ A not very meaningfull addition operator. """
              if isinstance(other, Record):
                  Record(self.id, self.name, self.properties + other.properties)
              # Should return NotImplemented if we can't handle type.
              return NotImplemented

      record_1 = Record(1, "name", ["proerty 1"])
      record_2 = Record(2, "other name", ["proerty 2"])
      print(record_1 + record_2)
      # Prints: Record(id=1, name='name', properties=['proerty 1', 'proerty 2'])
      
      #+END_SRC 


** Dictionaries
*** Dictionary
    - Container that maps a /key/ object to a /value/ object.
    - Key object must be immutable (/hashable/)
    - Highly optimized data structure:
      - Should always be used when certain non-=int= values need to be mapped to arbitrary
        other values.
      - Used internally by all Python objects that support dynamic
        attributes and accessible through the =__dict__= special attribute:

  #+attr_latex: :options fontsize=\scriptsize, bgcolor=dark
  #+BEGIN_SRC Python
  def a_function():
      pass
  a_function.attribute = "some value"
  print(a_function.attribute) # Prints: some value
  print(a_function.__dict__)  # Prints: {"attribute" : "some_value"}
  #+END_SRC

** Dictionaries
*** Useful functions
    - =get(key, default=None)=: If =key= is present, returns =value= corresponding to =key=
      otherwise returns =default=
    - =setdefault(key, default=None)=: Like =get= but also adds =key=  with =default= as value
      to the =dict= if not already present.
    - Iterating over =dict= content: =keys()=, =values()= =items()=

*** Example

  #+attr_latex: :options fontsize=\scriptsize, bgcolor=dark
  #+BEGIN_SRC Python
  scores = {}
  current_score = scores.setdefault("player_1", 0)
  scores["player_1"] = current_score + 1
  print(scores) # Prtins: {'player_1': 1}
  #+END_SRC

** Dictionaries
*** Other features
    - Since Python 3.7: Iterators return elements in order of insertion
      - Use =collections.OrderedDict= in older code if required
    - Other specialized dictionary types: =defaultdict= and =Counter= in =collections=
      module[fn:4].

[fn:4] Check docs for more info: https://docs.python.org/3.8/library/collections.html

** Dictionaries

*** Example
    - Download text from wikipedia:

  #+attr_latex: :options fontsize=\tiny, bgcolor=dark
  #+BEGIN_SRC Python
  import urllib.parse
  import urllib.request
  import json
  url = "https://en.wikipedia.org/w/api.php"
  values = {"action": "parse",
            "page": "Das Kapital",
            "format": "json",
            "prop": "wikitext"}
  data = urllib.parse.urlencode(values)
  request = urllib.request.Request(url, data.encode())
  with urllib.request.urlopen(request) as response:
    data = json.load(response)
  text = data["parse"]["wikitext"]["*"]
  #+END_SRC

    - Count letters:
  #+attr_latex: :options fontsize=\tiny, bgcolor=dark
  #+BEGIN_SRC Python
  from collections import Counter
  counter = Counter(text)
  print(counter.most_common(5))
  # Prints: [(' ', 3962), ('e', 2540), ('a', 2102), ('t', 2064), ('i', 2058)]
  #+END_SRC

[fn:4] Check docs for more info: https://docs.python.org/3.8/library/collections.html

** Lists
*** Lists
    - Container type designed to hold sequences of objects similar types.[fn:5]
      #+attr_latex: :options fontsize=\footnotesize, bgcolor=dark
      #+BEGIN_SRC Python
      numbers = [1, 2, 3, 4]
      #+END_SRC
*** Some useful member functions:
     - =append(x)=: Append =x= to list.
     - =insert(x, i)=: Insert =x= at index =i=.
     - =remove(x)=: Remove first occurrence of =x=
     - =index(x)=: Zero-based index of first element equal to =x=
     - =sort()=: Sort list

[fn:5] If you find yourself adding values of fundamentally different types to a
 list, chances are your are using them incorrectly.

** Lists
*** Customizing =sort=

  #+attr_latex: :options fontsize=\footnotesize, bgcolor=dark
  #+BEGIN_SRC Python
  from dataclasses import dataclass, field
  @dataclass
  class Record:
      id: int
      name: str
      properties: list = field(default_factory=list)

      def __lt__(self, other):
          """Compares two records using their id attribute."""
          return self.id < other.id
          
  record_1 = Record(1, "name", ["proerty 1"])
  record_2 = Record(2, "other name", ["proerty 2"])
  print(record_1 < record_2) # Prints: True
  #+END_SRC


** Lists
*** Customizing =sort=
    - =list.sort()= uses the =<= operator to compare objects
    - For user-defined classes, the =<= is implemented by the
      =__lt__= special method.

  #+attr_latex: :options fontsize=\footnotesize, bgcolor=dark
  #+BEGIN_SRC Python
  record_1 = Record(1, "name", ["proerty 1"])
  record_2 = Record(2, "other name", ["proerty 2"])
  records = [record_2, record_1]
  records.sort()
  print(records[0].id) # Prints: 1
  #+END_SRC

** Set
*** Set
    - Container for unique objects

      #+attr_latex: :options fontsize=\footnotesize, bgcolor=dark
      #+BEGIN_SRC Python
      numbers = {1, 1, 2, 2, 3, 3}
      print(numbers) # Prints: {1, 2, 3}
      #+END_SRC

*** Useful functions:
    - =union()= (or =|= operator): Union of two sets
    - =intersect()= (or =&= operator): Intersection of two sets
    - =difference()= (or =-= operator): Elements in first but not in second set
    - =symmetric_difference()= (or =^= operator): Elements neither in first nor in second set.

** Exercise 2

   - Exercise 2 on exercise sheet.
   - Time: 10 minutes

** Summary
*** Classes vs. data structures
    - If data has associated behaviour, make it a class
    - Else use a  data structure.

** Summary
*** Data structure overview
    \vspace{1cm}
    \includegraphics[width=\textwidth]{figures/data_structures}

* A brief tour of the standard library
** The Python standard library
   - Python comes with an extensive standard library,[fn:6] which
     is available on any system without the need to install any additional packages.

   - Offers solutions for common programming problems.
   - Most features are portable between operating systems (linux, windows, mac)


[fn:6] Documented in full detail here: https://docs.python.org/3/library/

** Built-in functions  
*** Built-in functions
    - As the name suggests, built-in functions are always available
      without requiring any additional imports
    - For complete list of built-in functions see: https://docs.python.org/3/library/functions.html
*** Some examples:
    - =any= and =all=:
      #+attr_latex: :options fontsize=\footnotesize, bgcolor=dark
      #+BEGIN_SRC Python
      all([True, False]) # Evaluates to False
      any([True, False]) # Evaluates to True
      #+END_SRC

** Built-in functions  
*** Some examples (cont'd):
    - =eval=, =exec= and =compile= to interactively execute code:
      #+attr_latex: :options fontsize=\footnotesize, bgcolor=dark
      #+BEGIN_SRC Python
      a = eval("1 + 1")
      print(a) # Prints: 2
      #+END_SRC

\vspace{0.5cm}
 \begin{alertblock}{DANGER}
 Don't use this with input you are not controlling. This is how computer
 systems get hacked.\footnote{For details refer to https://nedbatchelder.com/blog/201206/eval\_really\_is\_dangerous.html}
 \end{alertblock}
    
** Built-in functions  
*** Some examples (cont'd):
    - =locals=, and =globals= to access the local and module scope as
      dictionary:
      #+attr_latex: :options fontsize=\footnotesize, bgcolor=dark
      #+BEGIN_SRC Python
      globals()["my_variable"] = "my_value"
      print(my_variable) # Prints: my_value
      #+END_SRC

** Built-in functions  
*** Some examples (cont'd):
    - =hasattr=, =getattr= and =setattr= to manipulate attributes using strings:
      #+attr_latex: :options fontsize=\footnotesize, bgcolor=dark
      #+BEGIN_SRC Python
      class A: pass
      a = A()
      setattr(a, "attribute", 1)
      print(a.attribute) # Prints: 1
      #+END_SRC

** Built-in functions  
*** Some examples (cont'd):
    - =chr= and =ord= to manipulate sequences of letters[fn:8]:
      #+attr_latex: :options fontsize=\footnotesize, bgcolor=dark
      #+BEGIN_SRC Python
      letters = [chr(ord("a") + i) for i in range(16)]
      print(letters) # Prints: ['a', 'b', ..., 'p']
      #+END_SRC

[fn:8] I use this to automatically generate titles for subplots.

** Exercise 3

   - Exercise 3 on exercise sheet.
   - Time: 10 minutes

** Exercise 3
*** Manipulating module variables with user input:

     \vspace{1cm}
      \centering
      \includegraphics[width=0.5\textwidth]{figures/rake}


** Regular expressions
*** Regular expressions
    - pattern matching language useful to extract sequences from text
    - A regular expression is a string consisting of
      - Regular letters
      - Any of the special characters:
      #+attr_latex: :options bgcolor=light
      #+BEGIN_SRC bash
       . ^ $ * + ? { } [ ] \ | ( )
      #+END_SRC

** Regular expressions
*** Example: Matching filenames
    - Assume you want to identify with the following
      filenames:
      #+attr_latex: :options bgcolor=light, style=fruity
      #+BEGIN_SRC bash
      file_art_2353.txt
      file_ted_12.txt
      file_zae_8.txt
      file_lpi_9.txt
      #+END_SRC

** Regular expressions
*** Example: Matching filenames
    - Since the first part of the filename is fixed, we can match
      it using the test as is:

      #+attr_latex: :options bgcolor=light, escapeinside=<>
      #+BEGIN_SRC text
      <\color{green}{file\_}>
      #+END_SRC

    - This matches:
      
      #+attr_latex: :options bgcolor=light, style=fruity, escapeinside=<>
      #+BEGIN_SRC text
      <\color{green}{file\_}>art_2353.txt
      <\color{green}{file\_}>ted_12.txt
      <\color{green}{file\_}>zae_8.txt
      <\color{green}{file\_}>lpi_9.txt
      #+END_SRC

** Regular expressions
*** Example: Matching filenames
    - Next, we need to match 3 alphabetic characters
    - For, this we need to learn two additional features of regexps:
      - How to match \textbf{classes or sets of characters}
      - How to match \textbf{repeated characters}
    
** Regular expressions
*** Character classes
    - The following special sequences match classes of characters in regular expressions:
      - \pyil{.}  :: (dot) Matches any character (except newline)
      - \pyil{\d} :: Any digit
      - \pyil{\D} :: Anything /not matched/ by =\d=
      - \pyil{\s} :: Any whitespace character
      - \pyil{\S} :: Anything /not matched/ by =\s=
      - \pyil{\w} :: Any alphanumeric (letter or digit) character
      - \pyil{\W} :: Anything /not matched/ by =\w=

** Regular expressions
*** Character classes
    - Example:
      #+attr_latex: :options bgcolor=light, escapeinside=<>
      #+BEGIN_SRC text
      <{\color{green}file\_}{\color{red}{\textbackslash}w{\textbackslash}w{\textbackslash}w}>
      #+END_SRC

    - This matches:
      #+attr_latex: :options bgcolor=light, style=fruity, escapeinside=<>
      #+BEGIN_SRC text
      <{\color{green}file\_}{\color{red}art}>_2353.txt
      <{\color{green}file\_}{\color{red}ted}>_12.txt
      <{\color{green}file\_}{\color{red}zae}>_8.txt
      <{\color{green}file\_}{\color{red}lpi}>_9.txt
      #+END_SRC
    - But also:
      #+attr_latex: :options bgcolor=light, style=fruity, escapeinside=<>
      #+BEGIN_SRC text
      <{\color{green}file\_}{\color{red}123}>_2353.txt
      #+END_SRC

** Regular expressions
*** Character sets
    - A character set =[...]= is defined using square brackets and may contain:
      - Individual characters: =[abc]= match =a, b= or =c=
      - Ranges: =[a-c]=, same as above
      - Character classes
    - Character sets can be complemented by adding a =^= in the beginning:
      - =[^...]= matches all characters not matched by =[...]=.

** Regular expressions
*** Character sets

    - Example:
      #+attr_latex: :options bgcolor=light, escapeinside=<>
      #+BEGIN_SRC text
      <{\color{green}file\_}{\color{red}[a-zA-Z]}>
      #+END_SRC

    - This matches:
      #+attr_latex: :options bgcolor=light, style=fruity, escapeinside=<>
      #+BEGIN_SRC text
      <{\color{green}file\_}{\color{red}a}>rt_2353.txt
      <{\color{green}file\_}{\color{red}t}>ed_12.txt
      <{\color{green}file\_}{\color{red}z}>ae_8.txt
      <{\color{green}file\_}{\color{red}l}>pi_9.txt
      #+END_SRC
   
** Regular expressions
*** Repetitions
    - =*=: Matches 0 or more repetitions of the previous expression
      - Example =[a-z]*= matches =""=, ="word"= but not =123=.
    - =+=: Matches 1 or more repetitions of the previous expression
    - ={n}=: Match exactly =n= repetitions of the previous pattern.

** Regular expressions
*** Repetitions
    - Example:
      #+attr_latex: :options bgcolor=light, escapeinside=<>
      #+BEGIN_SRC text
      <{\color{green}file\_}{\color{red}[a-zA-Z]\{3\}}>
      #+END_SRC

    - This matches:
      #+attr_latex: :options bgcolor=light, style=fruity, escapeinside=<>
      #+BEGIN_SRC text
      <{\color{green}file\_}{\color{red}art}>_2353.txt
      <{\color{green}file\_}{\color{red}ted}>_12.txt
      <{\color{green}file\_}{\color{red}zae}>_8.txt
      <{\color{green}file\_}{\color{red}lpi}>_9.txt
      #+END_SRC

** Regular expressions
*** Repetitions
    - Example:
      #+attr_latex: :options bgcolor=light, escapeinside=<>
      #+BEGIN_SRC text
      <{\color{green}file\_}{\color{red}[a-zA-Z]\{3\}}{\color{green}\_}{\color{blue}{\textbackslash}d+}{\color{green}.txt}>
      #+END_SRC

    - This matches:
      #+attr_latex: :options bgcolor=light, style=fruity, escapeinside=<>
      #+BEGIN_SRC text
      <{\color{green}file\_}{\color{red}art}{\color{green}\_}{\color{blue}2353}{\color{green}.txt}>
      <{\color{green}file\_}{\color{red}ted}{\color{green}\_}{\color{blue}12}{\color{green}.txt}>
      <{\color{green}file\_}{\color{red}zae}{\color{green}\_}{\color{blue}8}{\color{green}.txt}>
      <{\color{green}file\_}{\color{red}lpi}{\color{green}\_}{\color{blue}9}{\color{green}.txt}>
      #+END_SRC

** Using regular expressions

   - Python provides built-in support for regular expression via the =re= module.
   - Since the =\= character has special meaning in Python strings as well as regexps, it is
     common to use a raw string to define a regular expression.
    #+attr_latex: :options bgcolor=dark
    #+BEGIN_SRC python
    import re
    expr = re.compile(r"file_[a-zA-Z]{3}_\d+.txt")
    match = expr.match("file_art_2353.txt")
    if match:
        print("Filename matches!")
    #+END_SRC

** Regular expressions
*** Extracting substrings
    - Parentheses =(...)=  can be used to define groups in a match:
    - Example:
      #+attr_latex: :options bgcolor=light, escapeinside=<>
      #+BEGIN_SRC text
      <{\color{green}file\_}{\color{red}([a-zA-Z]\{3\})}{\color{green}\_}{\color{blue}({\textbackslash}d+)}{\color{green}.txt}>
      #+END_SRC
      - Defines two groups identified by indices @@latex:{\color{red}1}@@ and @@latex:{\color{blue}2}@@.
    - Can be used to extract substrings from match:
    #+attr_latex: :options bgcolor=dark
    #+BEGIN_SRC python
    import re
    expr = re.compile(r"file_([a-zA-Z]{3})_(\d+).txt")
    match = expr.match("file_art_2353.txt")
    print(match.group(1)) # Prints: art
    print(match.group(2)) # Prints: 2353
    #+END_SRC

** Exercise 4
   - Exercise 4
   - Time: 15 minutes

** Manipulating file system paths
*** The problem   
    - File system paths look different Windows and Linux:
      - Windows:
        #+attr_latex: :options bgcolor=light, escapeinside=<>
        #+BEGIN_SRC text
        C:\Documents\Report.pdf
        #+END_SRC

      - Linux:
        #+attr_latex: :options bgcolor=light, escapeinside=<>
        #+BEGIN_SRC text
        /home/simon/Documents/Report.pdf
        #+END_SRC
    - By using strings to handle paths your code will likely
      become /platform dependent/ (or/and messy)
      
** Manipulating file system paths
*** The solution   
    - The =pathlib= module provides an object oriented
      solution to handle file system paths in a (mostly) platform independent
      way
    - The documentation[fn:7] even contains a simplified UML diagram:

      \centering
      \includegraphics[width=0.5\textwidth]{figures/uml}

[fn:7] Taken from https://docs.python.org/3/library/pathlib.html

** Manipulating file system paths
*** The =Path= class
    - For mosts tasks simply using the =Path= class is suffcient
*** Examples:
    - A common requirement is to determine the directory that a source file
      is located in:
      
    #+attr_latex: :options bgcolor=dark
    #+BEGIN_SRC python
    from pathlib import Path
    this_directory = Path(__file__).parent
    #+END_SRC

    - Or to get the current working directory:
      
    #+attr_latex: :options bgcolor=dark
    #+BEGIN_SRC python
    this_directory = Path.cwd()
    #+END_SRC

** Manipulating file system paths
*** More =Path= functionality
    - Concatenating paths (=/= operator):
      #+attr_latex: :options bgcolor=dark
      #+BEGIN_SRC python
      sub_dir = current_dir / "directory_name"
      #+END_SRC

    - Iterate over directory content:
      #+attr_latex: :options bgcolor=dark
      #+BEGIN_SRC python
      for p in current_dir.iterdir():
          print(p)
    #+END_SRC
      
    - Creating directories:
      - Avoids having to check whether directory already exists
      #+attr_latex: :options bgcolor=dark
      #+BEGIN_SRC python
      sub_dir.mkdir(parents=True, exist_ok=True)
      #+END_SRC
      
** Handling dates
*** =datetime=
    - The =datetime= module provides two handy classes to handle dates and times:
      - =datetime=: Represents a point in time defined by date and time
      - =timedelta=: Represents a time difference between to points in time
*** Useful functions
    - Date arithmetic:
      #+attr_latex: :options bgcolor=dark
      #+BEGIN_SRC python
      from datetime import datetime, timedelta
      date_1 = datetime(2020, 2, 28)
      date_2 = date_1 + timedelta(day=1)
      print(date_2) # Prints: 2020-02-29 00:00:00
      #+END_SRC

** Datetime
*** Useful functions
    - Parsing of dates using =strptime=[fn:9]:
      #+attr_latex: :options bgcolor=dark, fontsize=\scriptsize
      #+BEGIN_SRC python
      a_date = "27.10.2020" # Germans and their silly dates.
      parsed_date = datetime.strptime(a_date, "%d.%m.%Y")
      print(parsed_date) # Prints: 2020-10-27 00:00:00
      #+END_SRC

    - Parsing of dates using =strftime=:
      #+attr_latex: :options bgcolor=dark, fontsize=\scriptsize
      #+BEGIN_SRC python
      a_date = parsed_date.strftime("%d.%m.%Y")
      print(a_date) # Prints: 27.10.2020
      #+END_SRC

** Parsing command line arguments
*** The =argparse= module
    - Provides an object oriented interface to build command
      line application.
    - Automatically parses command line arguments and displays
      help messages.

** The =argparse= module
*** Example
    - From the =smhpy= source code:
      #+attr_latex: :options bgcolor=dark, fontsize=\scriptsize
      #+BEGIN_SRC python
      description = """Display SMHI weather forecasts on the command line."""
      parser = argparse.ArgumentParser(prog="smhpy",
                                     description=description)
      parser.add_argument('--days',
                           nargs=1,
                           type=int,
                           default=[1],
                           help="Number of days (< 10) to display.")
      args = parser.parse_args()
      days = args.days[0]
      #+END_SRC

** The =argparse= module
*** Example
    - Resulting interface:
      #+attr_latex: :options bgcolor=light, style=fruity, fontsize=\scriptsize
      #+BEGIN_SRC bash
      $ smhpy --help
      usage: smhpy [-h] [--days DAYS]

      Display SMHI weather forecasts on the command line.

      optional arguments:
        -h, --help   show this help message and exit
        --days DAYS  Number of days (< 10) to display
      #+END_SRC

      

[fn:9] See https://docs.python.org/3.6/library/datetime.html#strftime-strptime-behavior for full reference.

** Summary
*** The Python standard library
    - Contributes a lot to the effectiveness of Python
    - Don't try to reinvent the wheel: A lot of thinking went
      into designing it, so use it.
    - Too complex to cover completely here, so keep your eyes
      open.
      

** Summary
*** Advantages of the standard library
    - Platform independence
    - No need to install external packages
    - Proven solutions
    - Helps you get more done with less code
