#+TITLE: Scientific Software Development with Python
#+SUBTITLE: Project management and version control
#+AUTHOR: Simon Pfreundschuh
#+OPTIONS: H:2 toc:nil
#+REVEAL_THEME: chalmers
#+REVEAL_TRANS: fast
#+REVEAL_EXTRA_CSS: ./local.css
#+LaTeX_HEADER: \institute{Department of Space, Earth and Environment}
#+LaTeX_HEADER: \setbeamerfont{title}{family=\sffamily, series=\bfseries, size=\LARGE}
#+LATEX_HEADER: \usepackage[style=authoryear]{biblatex}
#+LATEX_HEADER: \usepackage{siunitx}
#+LaTeX_HEADER: \usetheme{chalmers}
#+LATEX_HEADER: \usepackage{subcaption}
#+LATEX_HEADER: \usepackage{amssymb}
#+LATEX_HEADER: \usemintedstyle{monokai}
#+LATEX_HEADER: \usepackage{pifont}
#+LATEX_HEADER: \definecolor{light}{HTML}{BBBBBB}
#+LATEX_HEADER: \definecolor{dark}{HTML}{353535}
#+LATEX_HEADER: \newcommand{\greencheck}{{\color{green}\ding{51}}}
#+LATEX_HEADER: \newcommand{\redcross}{{\color{red}\ding{55}}}
#+LATEX_HEADER: \newcommand{\question}{{\color{yellow}\textbf{???}}}
#+LATEX_HEADER: \addbibresource{literature.bib}
#+BEAMER_HEADER: \AtBeginSection[]{\begin{frame}<beamer>\frametitle{Agenda}\tableofcontents[currentsection]\end{frame}}

* Course overview
** Functions of software
*** The three fundamental functions of software[fn:1]:
   1. Performing its given task
   2. Affording change
   3. Communicate to its readers

[fn:1] Adapted from /Martin, Robert C. Agile software development: principles, patterns, and practices/.
** Dimensions of software development
\centering
\includegraphics[width=0.6\textwidth]{figures/dimensions_of_software_development}

** Dimensions of software development
\centering
\includegraphics[width=0.6\textwidth]{figures/dimensions_of_software_development_parts}
** Dimensions of software development
\centering
\includegraphics[width=0.6\textwidth]{figures/dimensions_of_software_development_this}

* Agile software development

** Introductory discussion

   1. Discussion in breakout rooms (5 min):
      - Presents yourself to your colleagues
      - Discuss following questions:
        - How big are the projects that your are involved in?
        - How are these projects managed?
   2. Presentation of results from breakout rooms (< 1 min / room)
      - Select a speaker to summarize results.

** Background
*** 90s and Early 00s:

   - /Heavyweight development processes/ prevalent in the software industry:
     - Detailed documentation and planning
     - Sequential process with big, heavy releases

   - Problems:
     - Unsuited for complex/explorative projects
     - Can't incorporate change

*** Emergence of agile practices:       
    - 90s: Development of programming and design practices to address problems of
      heavyweight processes
    - 00s: Generalization of agile practices to a management framework.


** The agile manifesto (2001)
*** Values   
    1. Individuals and interactions over processes and tools
    2. Working software over comprehensive documentation
    3. Customer collaboration over contract negotiation
    4. Responding to change over following a plan

** The agile manifesto (2001)
*** Principles   
    1. Customer satisfaction highest priority
    2. Welcome changing requirements 
    3. Deliver working software frequently
    4. Business people and developers must work together daily throughout the project
    5. Build projects around motivated individuals
    6. Face-to-face conversation to convey information

** The agile manifesto (2001)
*** Principles --- in science
    1. Customer satisfaction highest priority (\greencheck)
    2. Welcome changing requirements \greencheck
    3. Deliver working software frequently \greencheck
    4. Business people and developers must work together daily throughout the project \redcross
    5. Build projects around motivated individuals \greencheck
    6. Face-to-face conversation to convey information (\greencheck)

** The agile manifesto (2001)
*** Principles
    7. [@7] Working software is the primary measure of progress
    8. Sustainable working pace
    9. Technical excellence and good design 
    10. Simplicity: Maximizing the amount of work not done
    11. The best results emerge from self-organizing teams
    12. Regular reflection on how to become more effective 

** The agile manifesto (2001)
*** Principles --- in science
    7. [@7] Working software is the primary measure of progress \greencheck
    8. Sustainable working pace \question
    9. Technical excellence and good design \question
    10. Simplicity: Maximizing the amount of work not done \greencheck
    11. The best results emerge from self-organizing teams \greencheck
    12. Regular reflection on how to become more effective \question


** The agile manifesto (2001)

*** Agile principles, summarized
    - Self-organizing, cross-functional teams
    - Early delivery, evolutionary development
    - Flexible response to change
    
  \begin{alertblock}{}
   There is considerable overlap between agile principles and research.
   \textbf{This makes many agile approaches applicable also for our work.}
   \end{alertblock}
   
** So, what does it mean?
   :PROPERTIES:
   :BEAMER_opt: t
   :END:

   \centering
   \includegraphics[width=0.6\textwidth]{figures/dimensions_of_software_development_agile_0}

   - Organizational-conceptual level: Agile management practices
   - Organizational-technical: Agile development techniques

** So, what does it mean?
   :PROPERTIES:
   :BEAMER_opt: t
   :END:

   \centering
   \includegraphics[width=0.6\textwidth]{figures/dimensions_of_software_development_agile}

   - Organizational-conceptual level: ???[fn:2]
   - Organizational-technical: Agile techniques are de facto standard

[fn:2] I, personally, don't know. Hopefully, we'll find out during the course.

** Agile project management
*** Iterative development
    - Release early and often
    - Work is performed in /sprints/.
    - A sprint consists of three phases:
      1. Planning
      2. Implementation
      3. Reflection

** Agile project management
*** Project planning
     - Acknowledge uncertainty:
       - Not all can be known details from the start
       - Requirements are likely going to change during the process
     - Keep it simple:
       - Focus on functionality from user perspective (\textbf{features})
       - Omit implementation details
     - Be flexible:
       - The project plan may change during the project

**  Agile project management
*** User story
    - informal, natural language description of a feature
    - Represents a requirement

*** Backlog
    - Collection of user stories that define the project
    - Task pool for next development iteration
    - Can be extended throughout the project

  \begin{alertblock}{}
 The backlog defines the project scope. It is the essential
  planning tool of agile project management. 
  \end{alertblock}

** The three sprint phases
*** 1. Sprint planning
    - Defines the work to be done in a sprint by selecting
      user stories from the backlog
    - The team decides how the stories should be implemented
    - Amount of work based on /velocity/ estimates from previous
      iteration
    - Defines how increment should be delivered

\begin{alertblock}{}
Result of the sprint planning should be a tangible \textbf{sprint goal}, which
 the team commits to as a whole.
\end{alertblock}

** The three sprint phases

*** During the sprint
    - The team self-organizes its work to reach the sprint goal
    - Short but regular meetings to optimize the probability to
      reach the sprint goal
    - During meeting, each team member explains[fn:3]:
      1. What did I do since the last meeting that helped the team
        meet the sprint goal?
      2. What will I do now to help the team reach the sprint goal?
      3. Do I see any impediments that may prevent the development
        team from reaching the sprint goal?

[fn:3] Adapted from https://www.scrumguides.org/docs/scrumguide/v2016/2016-Scrum-Guide-US.pdf

** The three sprint phases

*** After the sprint
  1. Sprint review:
     - Which user stories have been implemented?
     - What problems occured?
     - What is the current state of the backlog?
     - How to proceed?
       - Input for next sprint planning
  2. Retrospective
     - The team reflects on its development process
     - The team identifies ways to:
       - Make work more effective and enjoyable
       - Increase product quality
     - The team decides which improvements it wants to
       implement in the next iteration

** Your project work
   
  - Project work will be done in four sprints
  - After each sprint, all teams will present their
    progress (retrospectives in schedule)[fn:3]

\begin{alertblock}{}
  The purpose of the retrospectives is to learn from each other. Share your
  experiences. Focus on your learnings and problems.
\end{alertblock}

[fn:3] Detailed instructions will be provided.

* Version control with git
** Background
*** git
   - Created by Linus Torvalds for the development of
     the Linux kernel
   - Distributed version-control system:
     - Keeps track of changes in source code
     - Allows synchronizing changes with repositories in arbitrary locations

   - Usage:
      #+attr_latex: :options bgcolor=light, style=fruity
      #+BEGIN_SRC bash
      $ git <command> <args>
      #+END_SRC

** Background
*** GitHub
   - One of several hosting services for git repositories
   - Additional features:
     - Simple web hosting
     - Communication platform
     - Issue tracking

\begin{alertblock}{}
  If you don't have an account, get one at \texttt{https://github.com}!
\end{alertblock}
   
** Principles
   :PROPERTIES:
   :BEAMER_opt: t
   :END:

   \includegraphics[width=\textwidth]{figures/git_principle.pdf}

*** Principles
  - git tracks development as a sequence of changes in \textbf{repositories}
  - Examples of changes:
    - Adding a file
    - Removing/renaming a file
    - Changing its content

** Principles
   :PROPERTIES:
   :BEAMER_opt: t
   :END:

   \includegraphics[width=\textwidth]{figures/git_principle.pdf}

*** Principles
  - A single sequence of changes is called a \textbf{branch}
  - the current state of your directory is defined by
    which branch is \textbf{checked out} (grey rectangle)
  - The currently checked out files are referred to as the \textbf{working tree}


** The most important git command

  #+attr_latex: :options bgcolor=light, fontsize=\scriptsize
  #+BEGIN_SRC bash
  $ git status
  #+END_SRC
  - Prints all relevant information about the current repository:
  #+attr_latex: :options bgcolor=light, fontsize=\scriptsize
  #+BEGIN_SRC bash
  On branch main

  Your branch is up to date with 'origin/main'.

  Changes not staged for commit:
    (use "git add <file>..." to update what will be committed)
    (use "git restore <file>..." to discard changes in working directory)
    modified:   README.md

  Untracked files:
    (use "git add <file>..." to include in what will be committed)
    STUDENT_LIST.md

  no changes added to commit (use "git add" and/or "git commit -a")
  #+END_SRC

** Initial setup
*** Your identity
      #+attr_latex: :options bgcolor=light, fontsize=\scriptsize
      #+BEGIN_SRC bash
      $ git config --global user.name "your_name"
      $ git config --global user.email your_email@chalmers.se
      #+END_SRC

*** Your editor
      #+attr_latex: :options bgcolor=light, fontsize=\scriptsize
      #+BEGIN_SRC bash
      $ git config --global core.editor vim # or emacs, nano, ...
      #+END_SRC

*** Default branch name
      - Change default branch name to main[fn:4]:
      #+attr_latex: :options bgcolor=light, fontsize=\scriptsize
      #+BEGIN_SRC bash
      $ git config --global init.defaultBranch main
      #+END_SRC

[fn:4] https://tools.ietf.org/id/draft-knodel-terminology-00.html

** Creating an empty repository
   :PROPERTIES:
   :BEAMER_opt: t
   :END:

   \includegraphics[width=\textwidth]{figures/git_empty.pdf}

*** Creating an empty repository

  #+attr_latex: :options bgcolor=light
  #+BEGIN_SRC bash
  $ git init
  #+END_SRC

  - Creates and initializes an empty repository
    in the current directory

** Committing changes
   :PROPERTIES:
   :BEAMER_opt: t
   :END:

   \includegraphics[width=\textwidth]{figures/git_empty.pdf}

*** Committing changes
  1. \textbf{Staging}: =git add= marks changed or new files for the next commit
  
  2. \textbf{Commiting}: =git commit= adds the changes from the staged files as an atomic change
    to the repository[fn:5]

[fn:5] Explicit staging can be skipped by using =git commit= followed by
   a list of file names.

** Committing changes
   :PROPERTIES:
   :BEAMER_opt: t
   :END:

   \includegraphics[width=\textwidth]{figures/git_first_commit.pdf}

*** Committing changes
  #+attr_latex: :options bgcolor=light, fontsize=\footnotesize
  #+BEGIN_SRC bash
  $ git add README.md LICENSE.md # Stage files for commit
  $ git commit                   # Commit to branch
  #+END_SRC
or 
  #+attr_latex: :options bgcolor=light, fontsize=\footnotesize
  #+BEGIN_SRC bash
  $ git commit README.md LICENSE.md
  #+END_SRC



** Committing changes
   :PROPERTIES:
   :BEAMER_opt: t
   :END:

   \includegraphics[width=\textwidth]{figures/git_first_commit.pdf}

   - Use =git log= to list the most recent changes in branch
   - Commits are identified by their checksum (the long, seemingly random
     number on the second line)

  #+attr_latex: :options bgcolor=light, fontsize=\scriptsize
  #+BEGIN_SRC bash
  $ git log
  commit 21959efd7528a00fab48062473f0409acd74e113 (HEAD -> main)
  Author: Simon Pfreundschuh <simon.pfreundschuh@chalmers.se>
  Date:   Mon Sep 7 21:09:44 2020 +0200

      Added README and LICENSE files.
  #+END_SRC

** Branching
   :PROPERTIES:
   :BEAMER_opt: t
   :END:

   \includegraphics[width=\textwidth]{figures/git_branch_1.pdf}

** Branching
   :PROPERTIES:
   :BEAMER_opt: t
   :END:

   \includegraphics[width=\textwidth]{figures/git_branch_new_1.pdf}

  - Branching allows experimenting with new features at the same
    time as keeping a snapshot of the currently working code
  - Use =git branch= to create a new branch:
    #+attr_latex: :options bgcolor=light, fontsize=\scriptsize
    #+BEGIN_SRC bash
    $ git branch new_feature
    #+END_SRC



** Branching
   :PROPERTIES:
   :BEAMER_opt: t
   :END:

   \includegraphics[width=\textwidth]{figures/git_branch_new_1.pdf}


   - However, currently we are still on the =main= branch[fn:6]
   - All git commands affect the branch /that is currently checked out/, i.e. =main=.

[fn:6] Indicated by grey rectangle in figure. Use =git status=
    to verify.

** Branching
   :PROPERTIES:
   :BEAMER_opt: t
   :END:

   \includegraphics[width=\textwidth]{figures/git_branch_new_2.pdf}


   - To switch to the new branch we need to /check it out/[fn:7]:
  
  #+attr_latex: :options bgcolor=light, fontsize=\scriptsize
  #+BEGIN_SRC bash
  $ git checkout new_feature
  #+END_SRC

  - Since the development in both branches is identical, the working
    directory doesn't change.

[fn:7] Alternatively, use =git checkout -b <branch_name>= to
    create new branch and to check it out immediately.

** Branching
   :PROPERTIES:
   :BEAMER_opt: t
   :END:

   \includegraphics[width=\textwidth]{figures/git_branch_new_3.pdf}


   - We can now add the new feature to the branch:
  #+attr_latex: :options bgcolor=light, fontsize=\scriptsize
  #+BEGIN_SRC bash
  $ git add new_feature.py
  $ git commit
  #+END_SRC
  
** Merging
   :PROPERTIES:
   :BEAMER_opt: t
   :END:

   \includegraphics[width=\textwidth]{figures/git_branch_new_3.pdf}

   - Integrating changes from another branch is called merging
   - To merge the changes in =new_feature= into =main=:

** Merging
   :PROPERTIES:
   :BEAMER_opt: t
   :END:

   \includegraphics[width=\textwidth]{figures/git_branch_new_3_co.pdf}

   - Integrating changes from another branch is called merging
   - To merge the changes in =new_feature= into =main=:
     1. Checkout main
        #+attr_latex: :options bgcolor=light, fontsize=\scriptsize
        #+BEGIN_SRC bash
        $ git checkout main
        #+END_SRC

** Merging
   :PROPERTIES:
   :BEAMER_opt: t
   :END:

   \includegraphics[width=\textwidth]{figures/git_branch_fast_forward.pdf}

   - Integrating changes from another branch is called merging
   - To merge the changes in =new_feature= into =main=:
     1. Checkout main
        #+attr_latex: :options bgcolor=light, fontsize=\scriptsize
        #+BEGIN_SRC bash
        $ git checkout main
        #+END_SRC
     2. Merge:
        #+attr_latex: :options bgcolor=light, fontsize=\scriptsize
        #+BEGIN_SRC bash
        $ git merge new_feature
        #+END_SRC

** Merging
   :PROPERTIES:
   :BEAMER_opt: t
   :END:

   \includegraphics[width=\textwidth]{figures/git_branch_fast_forward.pdf}

*** Fast forwarding
    - The special case where the branch to merge is simply ahead of the
      other branch is called \textbf{fast forwarding}.
    - Fast forwarding is trivial

** Merging
   :PROPERTIES:
   :BEAMER_opt: t
   :END:

   \includegraphics[width=\textwidth]{figures/git_branch_new_5.pdf}

*** Diverging branches
   - However, typically the branches will /diverge/
   - In this case a merge operation is required, which itself
     is a change commited to the repository

** Merging
   :PROPERTIES:
   :BEAMER_opt: t
   :END:

   \includegraphics[width=\textwidth]{figures/git_branch_merge.pdf}

*** Diverging branches
   - However, typically the branches will /diverge/
   - In this case a merge operation is required, which itself
     is commited to repository
   - If the changes to merge affect identical lines in the same files,
     a conflict occurs, which has to be resolved manually.

** Working with remotes
   :PROPERTIES:
   :BEAMER_opt: t
   :END:
   
   \includegraphics[width=\textwidth]{figures/git_remote_0.pdf}

*** Remotes
    - Distributed version control: Every repository can be synchronized
      with multiple other repositories in different locations.
    - A separate repository setup to track the same development is called
      a \textbf{remote}

** Working with remotes
   :PROPERTIES:
   :BEAMER_opt: t
   :END:
   
   \includegraphics[width=\textwidth]{figures/git_remote_add.pdf}

*** Adding a remote

    #+attr_latex: :options bgcolor=light, fontsize=\scriptsize
    #+BEGIN_SRC bash
    $ git remote --add <remote_name> https://github.com/see-mof/ssdp
    #+END_SRC
    - If the remote is a newly created repository it is still
      empty.

** Updating the remote repository
   :PROPERTIES:
   :BEAMER_opt: t
   :END:
   
   \includegraphics[width=\textwidth]{figures/git_remote_1.pdf}

*** Publishing local development
  - The =-u= option tells =git=, which remote branch =main= should track
    #+attr_latex: :options bgcolor=light, fontsize=\scriptsize
    #+BEGIN_SRC bash
    $ git push -u <remote_name> <branch> # here: git push -u origin main
    #+END_SRC
  - This becomes the default location for future pushes:
    #+attr_latex: :options bgcolor=light, fontsize=\scriptsize
    #+BEGIN_SRC bash
    $ git push # Same as: git push origin/main
    #+END_SRC



** Updating your local repository
   :PROPERTIES:
   :BEAMER_opt: t
   :END:
   
   \includegraphics[width=\textwidth]{figures/git_remote_update_0.pdf}

*** Fetching changes from remote
    - =git= keeps local copy of remote branches
    - They are denoted by =<remote_name>/<branch_name>=
    - =git fetch= updates the local copy of the remote branch:

    #+attr_latex: :options bgcolor=light, fontsize=\scriptsize
    #+BEGIN_SRC bash
    $ git fetch origin main
    #+END_SRC

** Updating your local repository
   :PROPERTIES:
   :BEAMER_opt: t
   :END:
   
   \includegraphics[width=\textwidth]{figures/git_remote_update.pdf}

*** Fetching changes from remote
    - =git= keeps local copy of remote branches
    - The are denoted as =<remote_name>/<branch_name>=
    - =git fetch <remote_name> <branch_name>= updates the local copy of
       the remote branch:

    #+attr_latex: :options bgcolor=light, fontsize=\scriptsize
    #+BEGIN_SRC bash
    $ git fetch origin main
    #+END_SRC

** Updating your local repository
   :PROPERTIES:
   :BEAMER_opt: t
   :END:
   
   \includegraphics[width=\textwidth]{figures/git_remote_1.pdf}

*** Merging the local branch
    - To update the local branch =main=, merge the local copy of the remote branch

    #+attr_latex: :options bgcolor=light, fontsize=\scriptsize
    #+BEGIN_SRC bash
    $ git merge origin/main
    #+END_SRC

** Updating your local repository
   :PROPERTIES:
   :BEAMER_opt: t
   :END:
   
   \includegraphics[width=\textwidth]{figures/git_remote_1.pdf}

*** Pulling changes from remote
    - =git pull= combines the =fetch= and =merge= commands:
    #+attr_latex: :options bgcolor=light, fontsize=\scriptsize
    #+BEGIN_SRC bash
    $ git pull origin main
    #+END_SRC
    or
    #+attr_latex: :options bgcolor=light, fontsize=\scriptsize
    #+BEGIN_SRC bash
    $ git pull # sufficient, if local branch tracks remote
    #+END_SRC


** Working with remotes
   :PROPERTIES:
   :BEAMER_opt: t
   :END:
   
   \includegraphics[width=\textwidth]{figures/git_remote_1.pdf}

*** Cloning a repository
    #+attr_latex: :options bgcolor=light, fontsize=\scriptsize
    #+BEGIN_SRC bash
    $ git clone https://github.com/see-mof/ssdp
    #+END_SRC
  - This creates a new local repository, adds the target as remote
    and pulls all branches

** git exercise
   - Solve tasks 1 and 2 from the git task sheet
   - Time 10 minutes
   - Help each other in breakout rooms

** Working with remotes
   :PROPERTIES:
   :BEAMER_opt: t
   :END:
   
   \includegraphics[width=\textwidth]{figures/git_remote_2.pdf}

*** Multiple remotes
    - It is possible to have multiple remotes[fn:8]:
    #+attr_latex: :options bgcolor=light, fontsize=\scriptsize
    #+BEGIN_SRC bash
    $ git add remote fork https://github.com/simonpf/ssdp
    $ git push fork
    #+END_SRC
[fn:8] For example a personal fork of a public repository.

** Distributed development workflow
   :PROPERTIES:
   :BEAMER_opt: t
   :END:
   
   \includegraphics[width=\textwidth]{figures/git_wf_begin.pdf}

*** Contributing to a public repository
    1. Clone public repository

** Distributed development workflow
   :PROPERTIES:
   :BEAMER_opt: t
   :END:
   
   \includegraphics[width=\textwidth]{figures/git_wf_new_feature.pdf}

*** Contributing to a public repository
    1. Clone public repository
    2. Add feature in new branch

** Distributed development workflow
   :PROPERTIES:
   :BEAMER_opt: t
   :END:
   
   \includegraphics[width=\textwidth]{figures/git_wf_push.pdf}

*** Contributing to a public repository
    1. Clone public repository
    2. Add feature in new branch
    3. Push new branch to personal fork of public repository

** Distributed development workflow
   :PROPERTIES:
   :BEAMER_opt: t
   :END:
   
   \includegraphics[width=\textwidth]{figures/git_wf_pr.pdf}

*** Contributing to a public repository
    1. Clone public repository
    2. Add feature in new branch
    3. Push new branch to personal fork of public repository
    4. Make pull request (PR) from fork

** Distributed development workflow
   :PROPERTIES:
   :BEAMER_opt: t
   :END:
   
   \includegraphics[width=\textwidth]{figures/git_wf_final.pdf}

*** Contributing to a public repository
    1. Clone public repository
    2. Add feature in new branch
    3. Push new branch to personal fork of public repository
    4. Make pull request (PR) from fork
    5. Update local =main= branch

** Forks and pull requests

   \includegraphics[width=\textwidth]{figures/github}

*** Forks and pull requests

   - To fork a repository, click the fork symbol in the upper right corner
   - To make a pull request, click on =Pull reqeusts= and then =New pull request=

** git exercise
   - Solve tasks 3 and 4 from the git task sheet
   - Time: 10 minutes
   - Help each other in breakout rooms

** =git status= revisited

  #+attr_latex: :options bgcolor=light, fontsize=\scriptsize
  #+BEGIN_SRC bash
  On branch main

  Your branch is up to date with 'origin/main'.

  Changes not staged for commit:
    (use "git add <file>..." to update what will be committed)
    (use "git restore <file>..." to discard changes in working directory)
    modified:   README.md

  Untracked files:
    (use "git add <file>..." to include in what will be committed)
    STUDENT_LIST.md

  no changes added to commit (use "git add" and/or "git commit -a")
  #+END_SRC

* Project pitches
** Project requirements
   - Final project published a Python package
   - Installable via =pip=
   - Automated test suite with high coverage (> 90%)
   - Automated deployment
   - Online documentation hosted on GitHub or Read The Docs.

** Project pitches
   - Maximum 5 minutes per presentation
   - Ideally more than two persons per project
   - If you work alone, please find someone to discuss
     your progress with and review code
