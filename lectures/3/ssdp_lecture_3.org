#+TITLE: Scientific Software Development with Python
#+SUBTITLE: DevOps 1: Testing and packaging Python software
#+AUTHOR: Simon Pfreundschuh
#+OPTIONS: H:2 toc:nil
#+REVEAL_THEME: chalmers
#+REVEAL_TRANS: fast
#+REVEAL_EXTRA_CSS: ./local.css
#+LaTeX_HEADER: \institute{Department of Space, Earth and Environment}
#+LaTeX_HEADER: \setbeamerfont{title}{family=\sffamily, series=\bfseries, size=\LARGE}
#+LATEX_HEADER: \usepackage[style=authoryear]{biblatex}
#+LATEX_HEADER: \usepackage{siunitx}
#+LaTeX_HEADER: \usetheme{chalmers}
#+LATEX_HEADER: \usepackage{subcaption}
#+LATEX_HEADER: \usepackage{amssymb}
#+LATEX_HEADER: \usepackage{dirtree}
#+LATEX_HEADER: \usemintedstyle{monokai}
#+LATEX_HEADER: \usepackage{pifont}
#+LATEX_HEADER: \definecolor{light}{HTML}{BBBBBB}
#+LATEX_HEADER: \definecolor{dark}{HTML}{353535}
#+LATEX_HEADER: \definecolor{source_file}{rgb}{0.82, 0.1, 0.26}
#+LATEX_HEADER: \newcommand{\greencheck}{{\color{green}\ding{51}}}
#+LATEX_HEADER: \newcommand{\redcross}{{\color{red}\ding{55}}}
#+LATEX_HEADER: \newcommand{\question}{{\color{yellow}\textbf{???}}}
#+LATEX_HEADER: \addbibresource{literature.bib}
#+BEAMER_HEADER: \AtBeginSection[]{\begin{frame}<beamer>\frametitle{Agenda}\tableofcontents[currentsection]\end{frame}}

* Introduction
** Lecture content
\centering
\includegraphics[width=0.6\textwidth]{figures/dimensions_of_software_development}

** Lecture content
\centering
\includegraphics[width=0.6\textwidth]{figures/dimensions_of_software_development_this}

** DevOps

*** DevOps

- Wikipedia[fn:1]: /set of practices that combines software development (Dev) and IT operations (Ops)./
- Personal definition: The steps that are required to turn code
  into software, e.g.:
  - Running tests
  - Generating documentation
  - Releasing the package

[fn:1] https://en.wikipedia.org/wiki/DevOps


** Aims and principles

*** Aims
    - Enable change
    - Ensure correctness

*** Principles
    - All code in one place
    - Short feedback times: continuous integration (CI)
    - Automate everything

** Lecture content
*** This lecture
      - Testing
      - Packaging

*** Next lecture
    - Documentation
    - Automation: Continuous integration with GitHub

** Exercise

   - Exercise 1 from task sheet
   - Time: 10 minutes

* Test driven development
** Testing software
*** Testing levels   
    - \textbf{Unit tests}: specific section of code (module)
    - Integration tests: Interaction between modules
    - System testing: Software as a whole
    - \textbf{Acceptance testing}: Functional requirements (user stories)


** Benefits of testing

*** Testing and agile development
    - Testing enables rapid change and adaptation (flexibility)
    - Testing gives you confidence in your code
    - Short feedback loops crucial for learning
   
** Test driven development (TDD)
*** TDD Workflow:
    1. Write test
    2. Run test to ensure that it fails
    3. Add new code until test passes

*** Benefits
    - All code is verified
    - Developer is forced into user role
    - Code is more modular
    - Code is guaranteed to be testable
    - Writing tests first ensures that tests cover only functionality and
      not implementation details

** Unit testing with pytest
*** pytest
    - Unit testing framework for python
    - There exist others, but general usage is the same.
*** Basic usage
   - Assuming the following project structure: 
@@latex:\dirtree{.1 project\_dir/. .2 module/. .3 \_\_init\_\_.py. .2 test/. .3 test\_module.py. }@@

** Unit testing with =pytest=
*** Basic usage
   - =module/__init__.py=:
  #+attr_latex: :options bgcolor=dark, fontsize=\scriptsize
  #+BEGIN_SRC Python
  def multiply(a, b):
      return a * b 
  #+END_SRC

   - =test/test_moudle.py=:
  #+attr_latex: :options bgcolor=dark, fontsize=\scriptsize
  #+BEGIN_SRC Python
  from module import multiply
  from random import randint

  def test_multiply():
      a = randint(0, 99)
      b = randint(0, 99)
      result = multiply(a, b)
      assert result == a * b
  #+END_SRC


** Unit testing with =pytest=
*** Invoking tests:
   =pytest= automatically runs all
      1. functions prefixed with =test=
      2. methods prefixed with =test= inside =Test=-prefixed classes
    in files matching =test_*.py= or =*_test.py=.

  #+attr_latex: :options bgcolor=light, fontsize=\scriptsize, style=fruity
  #+BEGIN_SRC bash
  cd project_dir
  pytest test/
  #+END_SRC

  - Example output: \vspace{-0.3cm}

  #+attr_latex: :options bgcolor=light, fontsize=\tiny, style=fruity
  #+BEGIN_SRC bash
  ==================================== test session starts =====================================
  platform linux -- Python 3.7.4, pytest-5.3.5, py-1.8.1, pluggy-0.13.1
  rootdir: /home/simon/src/scratch/module
  plugins: hypothesis-5.5.4, doctestplus-0.5.0, astropy-header-0.1.2, arraydiff-0.3, ...
  collected 1 item                                                                             

  test/test_module.py .                                                                  [100%]

  ===================================== 1 passed in 0.02s ======================================
  #+END_SRC

** Exercise

   - Exercise 2 from task sheet
   - Time: 15 minutes

** Unit testing with pytest
*** Some comments
    - Folder structure is not mandatory
    - Source files and test file can also be in same repository

*** Advanced concepts     
    - =pytest= provides several ways to handle the
      setup and teardown of more complex tests (/fixtures/)
    - More information can be found in the documentation[fn:2]

[fn:2] https://docs.pytest.org/en/stable/fixture.html

** Acceptance tests
   \begin{alertblock}{Note}
   Unit tests alone are not sufficient to ensure correctness of your
   software\footnote{Although, formally, nothing is: \url{https://en.wikipedia.org/wiki/Halting\_problem}}
   \end{alertblock}

*** Acceptance tests   
    - Verify that software fulfills requirements
    - User stories should be turned into acceptance tests
    - Benefits:
      - Ensures that functionality doesn't /decay/ over time
      - Can be turned into documentation (examples)
    - Example: Your plot script from the first exercise

** Summary
*** Unit tests   
    - Force you to write better code
    - Basis for iterative improvements
    - Ensure correctness on module level
*** Acceptance tests
    - Ensure that your software does what 
      it is expected to.

\begin{alertblock}{}
  Although reality may not always allow us to, we should consider test code  of
  equal importance as implementation code.
\end{alertblock}

* Python packaging system
** Python modules

*** Typical usage


      #+attr_latex: :options bgcolor=dark, fontsize=\scriptsize
      #+BEGIN_SRC Python
      # Import statments tell Python to load a module
      import module
      import module as m
      from module import function, Class
      # Functions and classes defined in the module can
      # be accessed through its attributes.
      module.function()
      m.function()
      #+END_SRC

*** Modules
   - Act as namespaces that bundle classes and functions
   - Module imports are cached:
     - Once a module is imported, it can't (easily) be changed[fn:5]

[fn:5] \scriptsize To enable autoreload in IPython: \newline \tiny \texttt{[get\_ipython().magic(m) for m in ["\%load\_ext autoreload", "\%autoreload 2"]]}
** Python modules
*** What qualifies as a module?
      - A python source file: =module.py=
      - A directory tree:
@@latex:\dirtree{.1 module/. .2 \_\_init\_\_.py. .2 submodule\_1.py. .2 submodule\_2/. .3 \_\_init\_\_.py. }@@

** Python modules
*** How does Python find them?
      - Modules are searched in the folders contained in the =sys.path=[fn:4]
        path variable
      - By default =sys.path= contains:
        1. Working directory from which Python interpreter is executed
        2. Content of =PYTHONPATH= environment variable
        3. Installation-dependent default directory.

[fn:4] To verify: =import sys; print(sys.path)=
@@latex:\vspace{0.5cm}@@
      
** Python modules
   \begin{alertblock}{Problem}
    Python only finds our own modules only when we are
    in the right directory.
    \end{alertblock}

** Packaging
*** Python packaging system
    - Python built-in support for:
      - Installing packages (making modules importable)
      - Handling dependencies
      - Distributing packages

** Packaging
*** Minimal setup
    - A project folder containing:
      1. the modules to include in the package
      2. a =setup.py=, which describes the package
      3. a README file
      4. a LICENSE file

     \vspace{0.5cm}
@@latex:\dirtree{.1 project\_folder/. .2 module\_name/. .3 \_\_init\_\_.py. .2 setup\_.py. .2 README.md. .2 LICENSE. }@@

** Choosing a license
*** Do choose a license
    - No license means exclusive copyright by default
      - This gets messy as soon as you collaborate with others
    - MIT license is a popular default and the most permissive
    - GNU GPLv3 forbids distributing closed source version of you code

** README
*** README.md
    - Rendered on GitHub as the frontpage of your repository.
    - Uses Markdown markup language.
    - Also used for package description on PyPI.

      #+attr_latex: :options bgcolor=light, fontsize=\tiny
      #+BEGIN_SRC bash
      # Header 1
       
      Normal text, *Italic text*, **Bold text**, ...

      ## Header 2
      
      1. A numerated ...
      2. ... list

      - A bulletted ...
      - ... list

      [A text link](https://link.target). 
      #+END_SRC

** setup.py
- Python source file defining package metadata
- Good template can be found on https://packaging.python.org/tutorials/packaging-projects/
- It is good practice to use the same name for the package and the included modules
#+attr_latex: :options bgcolor=dark, fontsize=\tiny
#+BEGIN_SRC Python
import setuptools

with open("README.md", "r") as fh:
    long_description = fh.read()

setuptools.setup(
    name="package_name",
    version="0.0.1",
    author="Your name",
    author_email="your@address.com",
    description="My first package.",
    long_description=long_description,
    long_description_content_type="text/markdown",
    url="https://github.com/you_username/your_project",
    packages=setuptools.find_packages(), # Searches modules in current directory.
    python_requires='>=3.6',
)
#+END_SRC

** Installing your package locally

*** Install using pip:
  #+attr_latex: :options bgcolor=light, fontsize=\scriptsize
  #+BEGIN_SRC bash
  $ cd project_folder
  $ pip install .
  #+END_SRC

 - Alternatively, you could use =python setup.py install=
 - Advantages of using pip:
   - =pip= automatically downloads dependencies
   - =pip= can be used to uninstall the package again

** Installing your package locally

*** Issue with normal install

    - Installing copies the module code into
      an installation-dependent directory
    - Changes made to the the code in the =project_folder=
      therefore do not affect the installed module
    - This is impractical when a package is in development
*** Solution

  #+attr_latex: :options bgcolor=light, fontsize=\scriptsize
  #+BEGIN_SRC bash
  $ pip install -e . # or pip install --editable
  #+END_SRC

** Handling dependencies

*** Install requires
    - Required packages are specified as argument to the =setuptools.setup=
      call.
    - Packages listed here are installed automatically before the package
      is installed.
#+attr_latex: :options bgcolor=dark, fontsize=\scriptsize
#+BEGIN_SRC Python
setuptools.setup(
    ...
    install_requires=[
        package_name,
        another_name>=1.0,
    ]
    ...
)
#+END_SRC


** Exercise

   - Exercise 3 from task sheet
   - Time: 10 minutes


** Distributing packages

Python provides two built-in ways of distributing
packages:

*** Source distributions
    - A source distribution (sdist) is simply the source
      code as a =tar.gz= archive.

*** Wheel
    - Built distribution already containing files and metadata required
      to install a package
    - Advantages over sdist:
      - Smaller in size
      - Faster to install
      - More secure (no =setup.py= execution)

** Distributing packages
*** Tools
    - The =wheels= package is required to build Python wheels:
    #+attr_latex: :options bgcolor=dark, fontsize=\scriptsize
    #+BEGIN_SRC Python
    $ pip install wheels
    #+END_SRC
      
    - We will use the =twine= package to upload your package
      distributions to PyPI:
    #+attr_latex: :options bgcolor=dark, fontsize=\scriptsize
    #+BEGIN_SRC Python
    $ pip install twine
    #+END_SRC


** Distributing packages

*** Generating wheels
    #+attr_latex: :options bgcolor=dark, fontsize=\scriptsize
    #+BEGIN_SRC Python
    $ python setup.py sdist bdist_wheel
    #+END_SRC

** Publishing your package

*** Package indices
    - Python packages can be published via package indices
    - The Python Package Index (PyPI) is the most popular one

*** Uploading your package
    - For testing, uploading to the test index[fn:6] of PyPI is recommended.
      This avoids polluting the standard PyPI name space.
    - To upload to =test.pypi.org=:
    #+attr_latex: :options bgcolor=light, fontsize=\scriptsize
    #+BEGIN_SRC bash
    $ python -m twine upload --repository testpypi dist/*
    #+END_SRC

[fn:6] Requires account at https://test.pypi.org

** Publishing your packages

*** Uploading your package
    - To upload to the real PyPI[fn:7]:
    #+attr_latex: :options bgcolor=light, fontsize=\scriptsize
    #+BEGIN_SRC bash
    $ python -m twine upload --repository testpypi dist/*
    #+END_SRC

[fn:7] Requires account at https://pypi.org


** Publishing your package
*** Installing your package from PyPI

    - Since the package has been upload to =test.pypi.org=, we need to specify
      the URL of the index:
    #+attr_latex: :options bgcolor=light, fontsize=\scriptsize
    #+BEGIN_SRC bash
    python3 -m pip install --index-url https://test.pypi.org your_package
    #+END_SRC

** Exercise
   - Exercise 4 on exercise sheet
   - Time: 10 minutes

** Packaging --- Summary
*** What you have learned
    - How to declare a package (=setup.py=)
    - How to package it into wheels
    - How to upload it to a package index

* Virtual environments
** Virtual environments
*** Dependency hell
    - The problem with the presented workflow:
      - By default =pip= will install packages system- or user-wide
      - This can lead to clashes if packages depend on different versions
        of a given package
    - It possible to end up in a configuration where not all requirements
      for all packages can be resolved simultaneously (dependency hell)
  
** Virtual environments
*** The solution
    - Virtual environment
    - A virtual environment is project-specific Python environment

*** =venv=
    - =venv= is a tool to create virtual environments
    - part of Python standard library
    - usage:
      #+attr_latex: :options bgcolor=light, fontsize=\scriptsize
      #+BEGIN_SRC bash
      $ python -m venv ...
      #+END_SRC

** Virtual environments
*** Creating a virtual environment
    - To create a virtual environment in the folder =.venv=:
      =project_folder=:
      #+attr_latex: :options bgcolor=light, fontsize=\scriptsize
      #+BEGIN_SRC bash
      $ python -m venv .venv
      #+END_SRC

*** Activating the environment
    - To activate the environment:
      =project_folder=:
      #+attr_latex: :options bgcolor=light, fontsize=\scriptsize
      #+BEGIN_SRC bash
      $ source .venv/bin/activate
      #+END_SRC
    - Note that you will need to reinstall any non-standard-library
      packages in the new environment

** Virtual environments

*** Listing installed packages
    - To extract names of currently installed packages:
      #+attr_latex: :options bgcolor=light, fontsize=\scriptsize
      #+BEGIN_SRC bash
      $ pip freeze > requirements.txt
      #+END_SRC
    - The =requirements.txt= file can be shared with others
      who can install file from it:
      #+BEGIN_SRC bash
      $ pip install -r requirements.txt
      #+END_SRC

** Virtual environments

*** Listing installed packages
    - To extract names of currently installed packages:
      #+attr_latex: :options bgcolor=light, fontsize=\scriptsize
      #+BEGIN_SRC bash
      $ pip freeze > requirements.txt
      #+END_SRC
    - The =requirements.txt= file can be shared with others
      who can install file from it:
      #+BEGIN_SRC bash
      $ pip install -r requirements.txt
      #+END_SRC

** Exercise
   - Exercise 5 on exercise sheet
   - Time: 10 minutes

** Packaging --- Summary
*** What we have learned
    - How to avoid dependency hell (=venv=)
    - How to share specific environments with others (=requirements.txt=)

